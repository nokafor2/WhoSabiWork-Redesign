image: node:18-buster

stages:
  - build
  - test
  - deploy

cache:
  paths:
    - node_modules/
    - vendor/

variables:
  # SSH_HOST: ec2-user@your-ec2-ip
  SSH_PORT: 22

.before_script:
  - apt-get update -y
  - apt-get install -y openssh-client rsync

# working
.build:
  stage: build
  script:
    - npm install
    - npm run build
    # - composer install --no-dev --optimize-autoloader
    # - composer install --no-dev
  artifacts:
    paths:
      - public/
      - vendor/
      - node_modules/

# working
install_composer:
  stage: build
  image: php:8.2-cli  # Use a PHP image with CLI
  script:
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - composer --version  # Verify installation
    # Now you can run composer commands
    - composer install

# Not working
.test:
  stage: test
  script:
    - php artisan test

ssh_deploy:
  stage: .pre
  image: alpine
  script:
    # STEP 1: Test for connection with the server
    # Check if id address and port 22 is open on the server
    - nc -zv $REMOTE_DEPLOY_HOST $SSH_PORT

    # STEP 2: Change the permission of the SSH_PRIVATE_KEY file
    # View the SSH_PRIVATE_KEY
    # - echo $SSH_PRIVATE_KEY
    # - cat $SSH_PRIVATE_KEY
    # Chcek permissions
    # - ls -l $SSH_PRIVATE_KEY
    # change permission of key to only the owner
    # Grant read-only permission to the private key
    - chmod 400 $SSH_PRIVATE_KEY
    # - ls -l $SSH_PRIVATE_KEY

    # STEP 3: SSH Connection
    # install the Openssh client, and rsync
    - apk add openssh-client rsync zip
    # ssh-agent is a background process that manages SSH-keys
    # Use ssh-agent to add our SSH-key
    # When ssh-agent runs, it outputs to the console some variables that interact with it
    # For it to work, it is put in a sub-shell $()
    # The eval is used to set the environment variables in current shell session
    - eval $(ssh-agent)
    # add the SSH_PRIVATE_KEY to the installed SSH environment with the file path variable
    # After added, tools like SSH, SCP can use the SSH-key for authentication
    - ssh-add $SSH_PRIVATE_KEY
    # Connect to the server
    # This is not a secure way of connecting to the server, just for testing purposes
    - ssh -o StrictHostKeyChecking=no ec2-user@$REMOTE_DEPLOY_HOST

.deploy:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
    - rsync -avz --exclude node_modules --exclude vendor --delete-after . $SSH_HOST:/var/www/laravel-app
    - ssh $SSH_HOST "cd /var/www/laravel-app && composer install --no-dev && npm install && npm run build && php artisan migrate --force && php artisan config:cache && php artisan route:cache"
